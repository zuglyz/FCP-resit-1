SUBMISSION

Submit a zip file containing the git repository

Repository = odesolve
Submission = odesolve.zip

Inside the zip file:
  odesolve folder = all code files and the .git folder

Code files and .git folder:
  README.md = Explains what is in the repository
  odesolve.py = Main code for the assignment
  test_odesolve.py = Provided with the assignment
  Jupyter notebook = Shows how to import and use functions that are defined in odesolve.py


TASK

GOAL: Make functions to solve ODEs using the Euler method and the RK4 method

odesolve.py provides the function that you should write but is missing the function body

Using test_odesolve.py, we need to make sure the code passes the 6 tests



ODEs using Euler Method

Defined by the rule:
  x(n+1) = x(n) + f(x(n), t(n)) * h
  where h = stepsize

Euler function should look like this:

eulercheck.py

from odesolve import euler

Defines the RHS of our ODE

def f(x, t):
  return x

Initial conditions

t0 = 1
x0 = 1
h = 0. 5
t1 = t0 + h
x1 = euler(f, x0, t0, h)



ODEs using RK4

1 step of the RK4 looks like:
  k1 = f(x(n), t(n))
  k2 = f(x(n) + k1 * h/2, t(n) + h/2)
  k3 = f(x(n) + k2 * h/2, t(n) + h/2)
  k4 = f(x(n) + k3 * h, t(n) + h)
  
  x(n+1) = x(n) + (k1 + 2k2 + 2k3 + k4) * h/6
  
Once the RK4 method is working, make a function = solveto

solveto = Used to make a number of steps with either the Euler/RK4 method

It should be possible to use the solveto function with either the Euler method of the RK4 method

x1 = solveto(f, x0, t0, t1, hmax, euler) #Uses Euler method
x1 = solveto(f, x0, t0, t1, hmax, rk4) #Uses RK4 method
x1 = solveto( f, x0, t0, t1, hmax) #Uses Eule r method



Using Numpy Arrays

All functions should be able to work with numpy arrays

import numpy as np
from odesolve import solveto

Defines the RHS of our ODE

def f(X, t):
x, y = X
dxdt = y
dydt = −x
return np.array([dxdt, dydt])

Initial conditions

t0 = 0
x0 = 1
y0 = 0
X0 = np.array([x0, y0])



odesolve

The purpose of this function is to give many different values of the solution for x suitable for a plot

import numpy as np
import matplotlib.pyplotasplt

from odesolve import odesolve

Defines the RHS of our ODE

def f(X, t):
x, y = X
dxdt = y
dydt = −x
return np.array([dxdt, dydt])

Initial conditions

x0 = 1
y0 = 0
X0 = np.array([x0, y0])
h = 0.01 
t = np.linspace(0, 10, 100) 
Xt = odesolve(f, X0, t, h)

Use .T to transpose the array

plt.plot(t, Xt.T)
plt.savefig(’shm.pdf’)
plt.show( )

Code and the plot should be included in the notebook.
odesolve should use the solveto function repeatedly in a loop to make a 2D array representing the solution
